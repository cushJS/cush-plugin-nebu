// Generated by CoffeeScript 2.3.0
var evalFile, fs, loadConfig, nebu, path;

evalFile = require('cush/utils/evalFile');

path = require('path');

fs = require('saxon');

nebu = require('@cush/nebu');

nebu.acorn = require('acorn');

module.exports = function() {
  var doneHook, shared;
  shared = {
    sourceMaps: true,
    plugins: this.get('nebu.plugins', [])
  };
  doneHook = this.hook('nebu');
  this.hook('package', async function(pack) {
    var config, plugins;
    if (config = (await loadConfig(pack.path))) {
      ({plugins} = config);
      Object.assign(config, shared);
      if (Array.isArray(plugins)) {
        config.plugins = plugins.concat(shared.plugins);
      }
      pack.nebu = config;
    }
  });
  return this.transform('.js', function(asset, pack) {
    var config, result;
    config = pack.nebu || shared;
    if (!config.plugins.length) {
      return;
    }
    config = Object.create(config);
    config.state = {};
    config.filename = asset.path;
    result = nebu.process(asset.content, config);
    doneHook.emit(asset, config.state);
    return result;
  });
};

// TODO: watch `nebu.config.js` for changes
loadConfig = async function(root) {
  var config, configPath;
  configPath = path.join(root, 'nebu.config.js');
  if ((await fs.isFile(configPath))) {
    config = evalFile(configPath);
    if (Array.isArray(config)) {
      return {
        plugins: config
      };
    } else {
      return config;
    }
  } else {
    return null;
  }
};
